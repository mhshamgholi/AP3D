==========
Args:Namespace(arch='ap3dres50', dataset='mars', distance='cosine', eval_step=10, gamma=0.1, gpu='0', height=256, lr=0.0003, margin=0.3, max_epoch=240, num_instances=4, pretrain='', resume='', root='/mnt/File/shamgholi/datasets/', sample_stride=8, save_dir='/mnt/File/shamgholi/projects/person_reid/AP3D/logs/row33', seed=1, seq_len=4, start_epoch=0, start_eval=0, stepsize=[60, 120, 180], test_batch=10, train_batch=10, use_cpu=False, weight_decay=0.0005, width=128, workers=4)
==========
Currently using GPU 0
Initializing dataset mars
=> MARS loaded
Dataset statistics:
  ------------------------------
  subset   | # ids | # tracklets
  ------------------------------
  train    |   625 |     8298
  query    |   626 |     1980
  gallery  |   622 |     9330
  ------------------------------
  total    |  1247 |    19608
  number of images per tracklet: 2 ~ 920, average 59.5
  ------------------------------
Initializing model: ap3dres50
Model size: 25.52396M
pretrain state dict loaded
>>> module conv1.weight is trainable ? True
>>> module bn1.weight is trainable ? True
>>> module bn1.bias is trainable ? True
>>> module layer1.0.conv1.weight is trainable ? True
>>> module layer1.0.bn1.weight is trainable ? True
>>> module layer1.0.bn1.bias is trainable ? True
>>> module layer1.0.conv2.weight is trainable ? True
>>> module layer1.0.bn2.weight is trainable ? True
>>> module layer1.0.bn2.bias is trainable ? True
>>> module layer1.0.conv3.weight is trainable ? True
>>> module layer1.0.bn3.weight is trainable ? True
>>> module layer1.0.bn3.bias is trainable ? True
>>> module layer1.0.downsample.0.weight is trainable ? True
>>> module layer1.0.downsample.1.weight is trainable ? True
>>> module layer1.0.downsample.1.bias is trainable ? True
>>> module layer1.1.conv1.weight is trainable ? True
>>> module layer1.1.bn1.weight is trainable ? True
>>> module layer1.1.bn1.bias is trainable ? True
>>> module layer1.1.conv2.weight is trainable ? True
>>> module layer1.1.bn2.weight is trainable ? True
>>> module layer1.1.bn2.bias is trainable ? True
>>> module layer1.1.conv3.weight is trainable ? True
>>> module layer1.1.bn3.weight is trainable ? True
>>> module layer1.1.bn3.bias is trainable ? True
>>> module layer1.2.conv1.weight is trainable ? True
>>> module layer1.2.bn1.weight is trainable ? True
>>> module layer1.2.bn1.bias is trainable ? True
>>> module layer1.2.conv2.weight is trainable ? True
>>> module layer1.2.bn2.weight is trainable ? True
>>> module layer1.2.bn2.bias is trainable ? True
>>> module layer1.2.conv3.weight is trainable ? True
>>> module layer1.2.bn3.weight is trainable ? True
>>> module layer1.2.bn3.bias is trainable ? True
>>> module layer2.0.conv1.weight is trainable ? True
>>> module layer2.0.bn1.weight is trainable ? True
>>> module layer2.0.bn1.bias is trainable ? True
>>> module layer2.0.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer2.0.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer2.0.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer2.0.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer2.0.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer2.0.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer2.0.bn2.weight is trainable ? True
>>> module layer2.0.bn2.bias is trainable ? True
>>> module layer2.0.conv3.weight is trainable ? True
>>> module layer2.0.bn3.weight is trainable ? True
>>> module layer2.0.bn3.bias is trainable ? True
>>> module layer2.0.downsample.0.weight is trainable ? True
>>> module layer2.0.downsample.1.weight is trainable ? True
>>> module layer2.0.downsample.1.bias is trainable ? True
>>> module layer2.1.conv1.weight is trainable ? True
>>> module layer2.1.bn1.weight is trainable ? True
>>> module layer2.1.bn1.bias is trainable ? True
>>> module layer2.1.conv2.weight is trainable ? True
>>> module layer2.1.bn2.weight is trainable ? True
>>> module layer2.1.bn2.bias is trainable ? True
>>> module layer2.1.conv3.weight is trainable ? True
>>> module layer2.1.bn3.weight is trainable ? True
>>> module layer2.1.bn3.bias is trainable ? True
>>> module layer2.2.conv1.weight is trainable ? True
>>> module layer2.2.bn1.weight is trainable ? True
>>> module layer2.2.bn1.bias is trainable ? True
>>> module layer2.2.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer2.2.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer2.2.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer2.2.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer2.2.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer2.2.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer2.2.bn2.weight is trainable ? True
>>> module layer2.2.bn2.bias is trainable ? True
>>> module layer2.2.conv3.weight is trainable ? True
>>> module layer2.2.bn3.weight is trainable ? True
>>> module layer2.2.bn3.bias is trainable ? True
>>> module layer2.3.conv1.weight is trainable ? True
>>> module layer2.3.bn1.weight is trainable ? True
>>> module layer2.3.bn1.bias is trainable ? True
>>> module layer2.3.conv2.weight is trainable ? True
>>> module layer2.3.bn2.weight is trainable ? True
>>> module layer2.3.bn2.bias is trainable ? True
>>> module layer2.3.conv3.weight is trainable ? True
>>> module layer2.3.bn3.weight is trainable ? True
>>> module layer2.3.bn3.bias is trainable ? True
>>> module layer3.0.conv1.weight is trainable ? True
>>> module layer3.0.bn1.weight is trainable ? True
>>> module layer3.0.bn1.bias is trainable ? True
>>> module layer3.0.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer3.0.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer3.0.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer3.0.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer3.0.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer3.0.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer3.0.bn2.weight is trainable ? True
>>> module layer3.0.bn2.bias is trainable ? True
>>> module layer3.0.conv3.weight is trainable ? True
>>> module layer3.0.bn3.weight is trainable ? True
>>> module layer3.0.bn3.bias is trainable ? True
>>> module layer3.0.downsample.0.weight is trainable ? True
>>> module layer3.0.downsample.1.weight is trainable ? True
>>> module layer3.0.downsample.1.bias is trainable ? True
>>> module layer3.1.conv1.weight is trainable ? True
>>> module layer3.1.bn1.weight is trainable ? True
>>> module layer3.1.bn1.bias is trainable ? True
>>> module layer3.1.conv2.weight is trainable ? True
>>> module layer3.1.bn2.weight is trainable ? True
>>> module layer3.1.bn2.bias is trainable ? True
>>> module layer3.1.conv3.weight is trainable ? True
>>> module layer3.1.bn3.weight is trainable ? True
>>> module layer3.1.bn3.bias is trainable ? True
>>> module layer3.2.conv1.weight is trainable ? True
>>> module layer3.2.bn1.weight is trainable ? True
>>> module layer3.2.bn1.bias is trainable ? True
>>> module layer3.2.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer3.2.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer3.2.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer3.2.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer3.2.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer3.2.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer3.2.bn2.weight is trainable ? True
>>> module layer3.2.bn2.bias is trainable ? True
>>> module layer3.2.conv3.weight is trainable ? True
>>> module layer3.2.bn3.weight is trainable ? True
>>> module layer3.2.bn3.bias is trainable ? True
>>> module layer3.3.conv1.weight is trainable ? True
>>> module layer3.3.bn1.weight is trainable ? True
>>> module layer3.3.bn1.bias is trainable ? True
>>> module layer3.3.conv2.weight is trainable ? True
>>> module layer3.3.bn2.weight is trainable ? True
>>> module layer3.3.bn2.bias is trainable ? True
>>> module layer3.3.conv3.weight is trainable ? True
>>> module layer3.3.bn3.weight is trainable ? True
>>> module layer3.3.bn3.bias is trainable ? True
>>> module layer3.4.conv1.weight is trainable ? True
>>> module layer3.4.bn1.weight is trainable ? True
>>> module layer3.4.bn1.bias is trainable ? True
>>> module layer3.4.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer3.4.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer3.4.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer3.4.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer3.4.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer3.4.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer3.4.bn2.weight is trainable ? True
>>> module layer3.4.bn2.bias is trainable ? True
>>> module layer3.4.conv3.weight is trainable ? True
>>> module layer3.4.bn3.weight is trainable ? True
>>> module layer3.4.bn3.bias is trainable ? True
>>> module layer3.5.conv1.weight is trainable ? True
>>> module layer3.5.bn1.weight is trainable ? True
>>> module layer3.5.bn1.bias is trainable ? True
>>> module layer3.5.conv2.weight is trainable ? True
>>> module layer3.5.bn2.weight is trainable ? True
>>> module layer3.5.bn2.bias is trainable ? True
>>> module layer3.5.conv3.weight is trainable ? True
>>> module layer3.5.bn3.weight is trainable ? True
>>> module layer3.5.bn3.bias is trainable ? True
>>> module layer4.0.conv1.weight is trainable ? True
>>> module layer4.0.bn1.weight is trainable ? True
>>> module layer4.0.bn1.bias is trainable ? True
>>> module layer4.0.conv2.weight is trainable ? True
>>> module layer4.0.bn2.weight is trainable ? True
>>> module layer4.0.bn2.bias is trainable ? True
>>> module layer4.0.conv3.weight is trainable ? True
>>> module layer4.0.bn3.weight is trainable ? True
>>> module layer4.0.bn3.bias is trainable ? True
>>> module layer4.0.downsample.0.weight is trainable ? True
>>> module layer4.0.downsample.1.weight is trainable ? True
>>> module layer4.0.downsample.1.bias is trainable ? True
>>> module layer4.1.conv1.weight is trainable ? True
>>> module layer4.1.bn1.weight is trainable ? True
>>> module layer4.1.bn1.bias is trainable ? True
>>> module layer4.1.conv2.weight is trainable ? True
>>> module layer4.1.bn2.weight is trainable ? True
>>> module layer4.1.bn2.bias is trainable ? True
>>> module layer4.1.conv3.weight is trainable ? True
>>> module layer4.1.bn3.weight is trainable ? True
>>> module layer4.1.bn3.bias is trainable ? True
>>> module layer4.2.conv1.weight is trainable ? True
>>> module layer4.2.bn1.weight is trainable ? True
>>> module layer4.2.bn1.bias is trainable ? True
>>> module layer4.2.conv2.weight is trainable ? True
>>> module layer4.2.bn2.weight is trainable ? True
>>> module layer4.2.bn2.bias is trainable ? True
>>> module layer4.2.conv3.weight is trainable ? True
>>> module layer4.2.bn3.weight is trainable ? True
>>> module layer4.2.bn3.bias is trainable ? True
>>> module hist.hist_edges is trainable ? False
>>> module bn.weight is trainable ? True
>>> module bn.bias is trainable ? True
>>> module classifier.0.weight is trainable ? True
>>> module classifier.0.bias is trainable ? True
Model size: 25.52396M
==> Start training
> /mnt/File/shamgholi/projects/person_reid/AP3D/models/ResNet.py(195)forward()
-> x = self.hist(x)
(Pdb) tensor([[0.7039, 0.1351, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.5767, 0.0000, 0.0570, 0.0461, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.3134, 0.2429, 0.3972, 0.0000, 0.2045, 0.0000],
        [0.0000, 0.0000, 0.9497, 0.9337, 0.7620, 0.3365, 0.1390, 0.0000],
        [0.0000, 0.0000, 1.0914, 1.0731, 0.6073, 0.9300, 0.9049, 0.2558],
        [0.0000, 0.0000, 0.3940, 0.6797, 0.4133, 0.6157, 0.5989, 0.1242],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.1278, 0.2783, 0.1271, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0757, 0.6442, 0.3270, 0.1269],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.2847, 0.0103, 0.1513],
        [0.0793, 0.0000, 0.0000, 0.0000, 0.0000, 0.1114, 0.0000, 0.0000],
        [1.3522, 1.0261, 0.2356, 0.0345, 0.0000, 0.0000, 0.0000, 0.0000],
        [2.4460, 2.0772, 0.3057, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [2.0350, 2.2165, 0.5034, 0.0000, 0.0000, 0.3944, 0.7737, 0.0678],
        [1.3624, 1.5055, 0.9952, 0.3316, 0.1970, 0.4956, 0.5262, 0.0901],
        [0.2707, 0.6787, 1.0928, 0.7468, 0.0718, 0.3765, 0.0000, 0.0000],
        [0.5707, 1.0393, 1.2517, 1.0712, 0.6197, 0.0000, 0.0000, 0.0000]],
       device='cuda:0', grad_fn=<SelectBackward>)
(Pdb) > /mnt/File/shamgholi/projects/person_reid/AP3D/models/ResNet.py(199)forward()
-> x = x.view(b, t, -1)
(Pdb) --KeyboardInterrupt--
(Pdb) torch.Size([40, 2048])
(Pdb) tensor(13.9663, device='cuda:0', grad_fn=<SelectBackward>)
(Pdb) 
