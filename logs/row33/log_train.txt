==========
Args:Namespace(arch='ap3dres50', dataset='mars', distance='cosine', eval_step=10, gamma=0.1, gpu='0', height=256, lr=0.0003, margin=0.3, max_epoch=240, num_instances=4, pretrain='', resume='', root='/mnt/File/shamgholi/datasets/', sample_stride=8, save_dir='/mnt/File/shamgholi/projects/person_reid/AP3D/logs/row33', seed=1, seq_len=4, start_epoch=0, start_eval=0, stepsize=[60, 120, 180], test_batch=10, train_batch=10, use_cpu=False, weight_decay=0.0005, width=128, workers=4)
==========
Currently using GPU 0
Initializing dataset mars
=> MARS loaded
Dataset statistics:
  ------------------------------
  subset   | # ids | # tracklets
  ------------------------------
  train    |   625 |     8298
  query    |   626 |     1980
  gallery  |   622 |     9330
  ------------------------------
  total    |  1247 |    19608
  number of images per tracklet: 2 ~ 920, average 59.5
  ------------------------------
Initializing model: ap3dres50
Model size: 33.22854M
pretrain state dict loaded
>>> module conv1.weight is trainable ? True
>>> module bn1.weight is trainable ? True
>>> module bn1.bias is trainable ? True
>>> module layer1.0.conv1.weight is trainable ? True
>>> module layer1.0.bn1.weight is trainable ? True
>>> module layer1.0.bn1.bias is trainable ? True
>>> module layer1.0.conv2.weight is trainable ? True
>>> module layer1.0.bn2.weight is trainable ? True
>>> module layer1.0.bn2.bias is trainable ? True
>>> module layer1.0.conv3.weight is trainable ? True
>>> module layer1.0.bn3.weight is trainable ? True
>>> module layer1.0.bn3.bias is trainable ? True
>>> module layer1.0.downsample.0.weight is trainable ? True
>>> module layer1.0.downsample.1.weight is trainable ? True
>>> module layer1.0.downsample.1.bias is trainable ? True
>>> module layer1.1.conv1.weight is trainable ? True
>>> module layer1.1.bn1.weight is trainable ? True
>>> module layer1.1.bn1.bias is trainable ? True
>>> module layer1.1.conv2.weight is trainable ? True
>>> module layer1.1.bn2.weight is trainable ? True
>>> module layer1.1.bn2.bias is trainable ? True
>>> module layer1.1.conv3.weight is trainable ? True
>>> module layer1.1.bn3.weight is trainable ? True
>>> module layer1.1.bn3.bias is trainable ? True
>>> module layer1.2.conv1.weight is trainable ? True
>>> module layer1.2.bn1.weight is trainable ? True
>>> module layer1.2.bn1.bias is trainable ? True
>>> module layer1.2.conv2.weight is trainable ? True
>>> module layer1.2.bn2.weight is trainable ? True
>>> module layer1.2.bn2.bias is trainable ? True
>>> module layer1.2.conv3.weight is trainable ? True
>>> module layer1.2.bn3.weight is trainable ? True
>>> module layer1.2.bn3.bias is trainable ? True
>>> module layer2.0.conv1.weight is trainable ? True
>>> module layer2.0.bn1.weight is trainable ? True
>>> module layer2.0.bn1.bias is trainable ? True
>>> module layer2.0.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer2.0.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer2.0.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer2.0.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer2.0.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer2.0.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer2.0.bn2.weight is trainable ? True
>>> module layer2.0.bn2.bias is trainable ? True
>>> module layer2.0.conv3.weight is trainable ? True
>>> module layer2.0.bn3.weight is trainable ? True
>>> module layer2.0.bn3.bias is trainable ? True
>>> module layer2.0.downsample.0.weight is trainable ? True
>>> module layer2.0.downsample.1.weight is trainable ? True
>>> module layer2.0.downsample.1.bias is trainable ? True
>>> module layer2.1.conv1.weight is trainable ? True
>>> module layer2.1.bn1.weight is trainable ? True
>>> module layer2.1.bn1.bias is trainable ? True
>>> module layer2.1.conv2.weight is trainable ? True
>>> module layer2.1.bn2.weight is trainable ? True
>>> module layer2.1.bn2.bias is trainable ? True
>>> module layer2.1.conv3.weight is trainable ? True
>>> module layer2.1.bn3.weight is trainable ? True
>>> module layer2.1.bn3.bias is trainable ? True
>>> module layer2.2.conv1.weight is trainable ? True
>>> module layer2.2.bn1.weight is trainable ? True
>>> module layer2.2.bn1.bias is trainable ? True
>>> module layer2.2.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer2.2.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer2.2.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer2.2.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer2.2.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer2.2.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer2.2.bn2.weight is trainable ? True
>>> module layer2.2.bn2.bias is trainable ? True
>>> module layer2.2.conv3.weight is trainable ? True
>>> module layer2.2.bn3.weight is trainable ? True
>>> module layer2.2.bn3.bias is trainable ? True
>>> module layer2.3.conv1.weight is trainable ? True
>>> module layer2.3.bn1.weight is trainable ? True
>>> module layer2.3.bn1.bias is trainable ? True
>>> module layer2.3.conv2.weight is trainable ? True
>>> module layer2.3.bn2.weight is trainable ? True
>>> module layer2.3.bn2.bias is trainable ? True
>>> module layer2.3.conv3.weight is trainable ? True
>>> module layer2.3.bn3.weight is trainable ? True
>>> module layer2.3.bn3.bias is trainable ? True
>>> module layer3.0.conv1.weight is trainable ? True
>>> module layer3.0.bn1.weight is trainable ? True
>>> module layer3.0.bn1.bias is trainable ? True
>>> module layer3.0.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer3.0.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer3.0.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer3.0.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer3.0.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer3.0.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer3.0.bn2.weight is trainable ? True
>>> module layer3.0.bn2.bias is trainable ? True
>>> module layer3.0.conv3.weight is trainable ? True
>>> module layer3.0.bn3.weight is trainable ? True
>>> module layer3.0.bn3.bias is trainable ? True
>>> module layer3.0.downsample.0.weight is trainable ? True
>>> module layer3.0.downsample.1.weight is trainable ? True
>>> module layer3.0.downsample.1.bias is trainable ? True
>>> module layer3.1.conv1.weight is trainable ? True
>>> module layer3.1.bn1.weight is trainable ? True
>>> module layer3.1.bn1.bias is trainable ? True
>>> module layer3.1.conv2.weight is trainable ? True
>>> module layer3.1.bn2.weight is trainable ? True
>>> module layer3.1.bn2.bias is trainable ? True
>>> module layer3.1.conv3.weight is trainable ? True
>>> module layer3.1.bn3.weight is trainable ? True
>>> module layer3.1.bn3.bias is trainable ? True
>>> module layer3.2.conv1.weight is trainable ? True
>>> module layer3.2.bn1.weight is trainable ? True
>>> module layer3.2.bn1.bias is trainable ? True
>>> module layer3.2.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer3.2.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer3.2.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer3.2.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer3.2.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer3.2.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer3.2.bn2.weight is trainable ? True
>>> module layer3.2.bn2.bias is trainable ? True
>>> module layer3.2.conv3.weight is trainable ? True
>>> module layer3.2.bn3.weight is trainable ? True
>>> module layer3.2.bn3.bias is trainable ? True
>>> module layer3.3.conv1.weight is trainable ? True
>>> module layer3.3.bn1.weight is trainable ? True
>>> module layer3.3.bn1.bias is trainable ? True
>>> module layer3.3.conv2.weight is trainable ? True
>>> module layer3.3.bn2.weight is trainable ? True
>>> module layer3.3.bn2.bias is trainable ? True
>>> module layer3.3.conv3.weight is trainable ? True
>>> module layer3.3.bn3.weight is trainable ? True
>>> module layer3.3.bn3.bias is trainable ? True
>>> module layer3.4.conv1.weight is trainable ? True
>>> module layer3.4.bn1.weight is trainable ? True
>>> module layer3.4.bn1.bias is trainable ? True
>>> module layer3.4.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer3.4.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer3.4.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer3.4.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer3.4.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer3.4.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer3.4.bn2.weight is trainable ? True
>>> module layer3.4.bn2.bias is trainable ? True
>>> module layer3.4.conv3.weight is trainable ? True
>>> module layer3.4.bn3.weight is trainable ? True
>>> module layer3.4.bn3.bias is trainable ? True
>>> module layer3.5.conv1.weight is trainable ? True
>>> module layer3.5.bn1.weight is trainable ? True
>>> module layer3.5.bn1.bias is trainable ? True
>>> module layer3.5.conv2.weight is trainable ? True
>>> module layer3.5.bn2.weight is trainable ? True
>>> module layer3.5.bn2.bias is trainable ? True
>>> module layer3.5.conv3.weight is trainable ? True
>>> module layer3.5.bn3.weight is trainable ? True
>>> module layer3.5.bn3.bias is trainable ? True
>>> module layer4.0.conv1.weight is trainable ? True
>>> module layer4.0.bn1.weight is trainable ? True
>>> module layer4.0.bn1.bias is trainable ? True
>>> module layer4.0.conv2.weight is trainable ? True
>>> module layer4.0.bn2.weight is trainable ? True
>>> module layer4.0.bn2.bias is trainable ? True
>>> module layer4.0.conv3.weight is trainable ? True
>>> module layer4.0.bn3.weight is trainable ? True
>>> module layer4.0.bn3.bias is trainable ? True
>>> module layer4.0.downsample.0.weight is trainable ? True
>>> module layer4.0.downsample.1.weight is trainable ? True
>>> module layer4.0.downsample.1.bias is trainable ? True
>>> module layer4.1.conv1.weight is trainable ? True
>>> module layer4.1.bn1.weight is trainable ? True
>>> module layer4.1.bn1.bias is trainable ? True
>>> module layer4.1.conv2.weight is trainable ? True
>>> module layer4.1.bn2.weight is trainable ? True
>>> module layer4.1.bn2.bias is trainable ? True
>>> module layer4.1.conv3.weight is trainable ? True
>>> module layer4.1.bn3.weight is trainable ? True
>>> module layer4.1.bn3.bias is trainable ? True
>>> module layer4.2.conv1.weight is trainable ? True
>>> module layer4.2.bn1.weight is trainable ? True
>>> module layer4.2.bn1.bias is trainable ? True
>>> module layer4.2.conv2.weight is trainable ? True
>>> module layer4.2.bn2.weight is trainable ? True
>>> module layer4.2.bn2.bias is trainable ? True
>>> module layer4.2.conv3.weight is trainable ? True
>>> module layer4.2.bn3.weight is trainable ? True
>>> module layer4.2.bn3.bias is trainable ? True
>>> module hist.hist_edges is trainable ? False
>>> module bn.weight is trainable ? True
>>> module bn.bias is trainable ? True
>>> module classifier.0.weight is trainable ? True
>>> module classifier.0.bias is trainable ? True
Model size: 33.22854M
==> Start training
> /mnt/File/shamgholi/projects/person_reid/AP3D/models/ResNet.py(195)forward()
-> x = self.hist(x)
(Pdb) 190  	            x1 = self.hist(x)
191  	            x2 = F.max_pool2d(x, x.size()[2:]).view(b*t, -1) # -> [80, 2048, 1, 1]
192  	            x = torch.cat((x1, x2), 1)
193  	        elif conf.use_hist and not conf.concat_hist_max:
194  	            pdb.set_trace()
195  ->	            x = self.hist(x)
196  	            pdb.set_trace()
197  	        else:
198  	            x = F.max_pool2d(x, x.size()[2:])
199  	        x = x.view(b, t, -1)
200  	
(Pdb) torch.Size([40, 2048, 16, 8])
(Pdb) tensor([[0.1196, 0.5841, 1.0375, 1.0173, 1.1210, 1.6880, 1.8042, 1.5199],
        [0.4598, 0.6775, 0.8646, 0.7400, 0.1545, 0.1837, 0.5361, 0.5820],
        [0.1644, 0.0000, 0.3104, 0.1012, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0100, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1278, 0.0000],
        [0.1549, 0.0638, 0.0000, 0.0000, 0.0000, 0.1143, 0.3150, 0.0000],
        [0.0000, 0.4129, 0.4320, 0.0000, 0.0000, 0.1402, 0.1534, 0.0000],
        [0.0000, 0.3934, 1.2268, 0.3101, 0.3868, 0.2302, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.4094, 0.1483, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0555, 0.0221, 0.0218, 0.0000],
        [0.0000, 0.0000, 0.1137, 0.5755, 0.0816, 0.4395, 0.1732, 0.0000],
        [0.1550, 0.6283, 1.1241, 1.4892, 0.6352, 0.1871, 0.1339, 0.0000],
        [0.1147, 0.6739, 1.5614, 1.0541, 0.7503, 0.0685, 0.0000, 0.0000],
        [0.1219, 1.0185, 1.5724, 1.6147, 1.7905, 0.8265, 0.3125, 0.0000],
        [0.1930, 1.0759, 1.3883, 1.7180, 1.8428, 0.0431, 0.0000, 0.0000],
        [0.1102, 0.9328, 1.0208, 1.0949, 0.9049, 0.0000, 0.0000, 0.0000]],
       device='cuda:0', grad_fn=<SelectBackward>)
(Pdb) > /mnt/File/shamgholi/projects/person_reid/AP3D/models/ResNet.py(199)forward()
-> x = x.view(b, t, -1)
(Pdb) tensor([30.0921,  5.2834,  3.8591,  4.1208,  3.1486,  0.0000, 19.1728],
       device='cuda:0', grad_fn=<SelectBackward>)
(Pdb) 
