==========
Args:Namespace(arch='ap3dres50', dataset='mars', distance='cosine', eval_step=10, gamma=0.1, gpu='0', height=256, lr=0.0003, margin=0.3, max_epoch=240, num_instances=4, pretrain='', resume='', root='/mnt/File/shamgholi/datasets/', sample_stride=8, save_dir='/mnt/storage/shamgholi/ap3d_logs/logs/row35', seed=1, seq_len=4, start_epoch=0, start_eval=0, stepsize=[60, 120, 180], test_batch=64, train_batch=64, use_cpu=False, weight_decay=0.0005, width=128, workers=4)
==========
Currently using GPU 0
Initializing dataset mars
=> MARS loaded
Dataset statistics:
  ------------------------------
  subset   | # ids | # tracklets
  ------------------------------
  train    |   625 |     8298
  query    |   626 |     1980
  gallery  |   622 |     9330
  ------------------------------
  total    |  1247 |    19608
  number of images per tracklet: 2 ~ 920, average 59.5
  ------------------------------
Initializing model: ap3dres50
Model size: 11.75930M
pretrain state dict loaded
>>> module conv1.weight is trainable ? True
>>> module bn1.weight is trainable ? True
>>> module bn1.bias is trainable ? True
>>> module layer1.0.conv1.weight is trainable ? True
>>> module layer1.0.bn1.weight is trainable ? True
>>> module layer1.0.bn1.bias is trainable ? True
>>> module layer1.0.conv2.weight is trainable ? True
>>> module layer1.0.bn2.weight is trainable ? True
>>> module layer1.0.bn2.bias is trainable ? True
>>> module layer1.1.conv1.weight is trainable ? True
>>> module layer1.1.bn1.weight is trainable ? True
>>> module layer1.1.bn1.bias is trainable ? True
>>> module layer1.1.conv2.weight is trainable ? True
>>> module layer1.1.bn2.weight is trainable ? True
>>> module layer1.1.bn2.bias is trainable ? True
>>> module layer2.0.conv1.weight is trainable ? True
>>> module layer2.0.bn1.weight is trainable ? True
>>> module layer2.0.bn1.bias is trainable ? True
>>> module layer2.0.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer2.0.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer2.0.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer2.0.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer2.0.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer2.0.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer2.0.bn2.weight is trainable ? True
>>> module layer2.0.bn2.bias is trainable ? True
>>> module layer2.0.downsample.0.weight is trainable ? True
>>> module layer2.0.downsample.1.weight is trainable ? True
>>> module layer2.0.downsample.1.bias is trainable ? True
>>> module layer2.1.conv1.weight is trainable ? True
>>> module layer2.1.bn1.weight is trainable ? True
>>> module layer2.1.bn1.bias is trainable ? True
>>> module layer2.1.conv2.weight is trainable ? True
>>> module layer2.1.bn2.weight is trainable ? True
>>> module layer2.1.bn2.bias is trainable ? True
>>> module layer3.0.conv1.weight is trainable ? True
>>> module layer3.0.bn1.weight is trainable ? True
>>> module layer3.0.bn1.bias is trainable ? True
>>> module layer3.0.conv2.APM.semantic_mapping.weight is trainable ? True
>>> module layer3.0.conv2.APM.x_mapping.weight is trainable ? True
>>> module layer3.0.conv2.APM.n_mapping.weight is trainable ? True
>>> module layer3.0.conv2.APM.contrastive_att_net.0.weight is trainable ? True
>>> module layer3.0.conv2.spatial_conv3d.weight is trainable ? True
>>> module layer3.0.conv2.temporal_conv3d.weight is trainable ? True
>>> module layer3.0.bn2.weight is trainable ? True
>>> module layer3.0.bn2.bias is trainable ? True
>>> module layer3.0.downsample.0.weight is trainable ? True
>>> module layer3.0.downsample.1.weight is trainable ? True
>>> module layer3.0.downsample.1.bias is trainable ? True
>>> module layer3.1.conv1.weight is trainable ? True
>>> module layer3.1.bn1.weight is trainable ? True
>>> module layer3.1.bn1.bias is trainable ? True
>>> module layer3.1.conv2.weight is trainable ? True
>>> module layer3.1.bn2.weight is trainable ? True
>>> module layer3.1.bn2.bias is trainable ? True
>>> module layer4.0.conv1.weight is trainable ? True
>>> module layer4.0.bn1.weight is trainable ? True
>>> module layer4.0.bn1.bias is trainable ? True
>>> module layer4.0.conv2.weight is trainable ? True
>>> module layer4.0.bn2.weight is trainable ? True
>>> module layer4.0.bn2.bias is trainable ? True
>>> module layer4.0.downsample.0.weight is trainable ? True
>>> module layer4.0.downsample.1.weight is trainable ? True
>>> module layer4.0.downsample.1.bias is trainable ? True
>>> module layer4.1.conv1.weight is trainable ? True
>>> module layer4.1.bn1.weight is trainable ? True
>>> module layer4.1.bn1.bias is trainable ? True
>>> module layer4.1.conv2.weight is trainable ? True
>>> module layer4.1.bn2.weight is trainable ? True
>>> module layer4.1.bn2.bias is trainable ? True
>>> module bn.weight is trainable ? True
>>> module bn.bias is trainable ? True
>>> module classifier.weight is trainable ? True
>>> module classifier.bias is trainable ? True
Model size: 11.75930M
==> Start training
Epoch1 Time:117.2s Data:2.2s Loss:6.0383 Xent:5.7648 Htri:0.2735 Acc:16.15% 
Epoch2 Time:118.3s Data:2.2s Loss:4.3188 Xent:4.1662 Htri:0.1527 Acc:31.70% 
Epoch3 Time:118.2s Data:2.0s Loss:3.0844 Xent:2.9799 Htri:0.1045 Acc:48.62% 
Epoch4 Time:117.8s Data:2.1s Loss:2.2205 Xent:2.1459 Htri:0.0746 Acc:63.17% 
Epoch5 Time:118.3s Data:2.1s Loss:1.5801 Xent:1.5225 Htri:0.0576 Acc:74.67% 
Epoch6 Time:118.0s Data:2.0s Loss:1.1386 Xent:1.0952 Htri:0.0433 Acc:82.60% 
Epoch7 Time:118.0s Data:2.2s Loss:0.7897 Xent:0.7519 Htri:0.0377 Acc:89.36% 
Epoch8 Time:118.4s Data:2.1s Loss:0.5771 Xent:0.5451 Htri:0.0320 Acc:93.18% 
Epoch9 Time:117.7s Data:2.0s Loss:0.4306 Xent:0.4001 Htri:0.0305 Acc:95.58% 
Epoch10 Time:118.3s Data:1.9s Loss:0.3011 Xent:0.2809 Htri:0.0202 Acc:97.06% 
==> Test
Extracted features for query set, obtained torch.Size([1980, 512]) matrix
Extracted features for gallery set, obtained torch.Size([11310, 512]) matrix
Extracting features complete in 1m 51s
Computing distance matrix
Computing CMC and mAP
Results ----------
top1:78.8% top5:91.0% top10:93.7% mAP:67.2%
------------------
Epoch11 Time:118.2s Data:3.0s Loss:0.2428 Xent:0.2237 Htri:0.0191 Acc:97.62% 
Epoch12 Time:117.7s Data:2.2s Loss:0.2025 Xent:0.1837 Htri:0.0187 Acc:98.30% 
Epoch13 Time:118.7s Data:2.0s Loss:0.1587 Xent:0.1439 Htri:0.0148 Acc:98.82% 
Epoch14 Time:118.7s Data:2.3s Loss:0.1464 Xent:0.1293 Htri:0.0170 Acc:98.62% 
Epoch15 Time:119.0s Data:2.2s Loss:0.1403 Xent:0.1243 Htri:0.0159 Acc:98.64% 
Epoch16 Time:118.4s Data:2.2s Loss:0.1214 Xent:0.1077 Htri:0.0137 Acc:99.08% 
Epoch17 Time:119.1s Data:2.0s Loss:0.1356 Xent:0.1185 Htri:0.0171 Acc:98.99% 
Epoch18 Time:119.0s Data:2.0s Loss:0.1172 Xent:0.0999 Htri:0.0173 Acc:99.03% 
Epoch19 Time:119.5s Data:2.1s Loss:0.1023 Xent:0.0879 Htri:0.0144 Acc:99.11% 
Epoch20 Time:118.9s Data:2.4s Loss:0.1055 Xent:0.0890 Htri:0.0164 Acc:99.04% 
==> Test
Extracted features for query set, obtained torch.Size([1980, 512]) matrix
Extracted features for gallery set, obtained torch.Size([11310, 512]) matrix
Extracting features complete in 1m 44s
Computing distance matrix
Computing CMC and mAP
Results ----------
top1:76.6% top5:90.2% top10:93.3% mAP:65.6%
------------------
Epoch21 Time:118.0s Data:2.1s Loss:0.0969 Xent:0.0803 Htri:0.0166 Acc:99.24% 
Epoch22 Time:119.6s Data:2.1s Loss:0.1278 Xent:0.1049 Htri:0.0230 Acc:98.88% 
Epoch23 Time:119.0s Data:2.0s Loss:0.0988 Xent:0.0830 Htri:0.0158 Acc:99.09% 
